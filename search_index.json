[
["index.html", "Programming in the tidyverse Preface", " Programming in the tidyverse Kirill Müller Preface Start writing your book here. If you are in RStudio, Click the Build button to build the book. "],
["introduction.html", "1 Introduction", " 1 Introduction "],
["iteration.html", "2 Iteration 2.1 Review of visualization and data transformation 2.2 Vectors and columns 2.3 Named vectors and two-column tibbles 2.4 Processing all files 2.5 Manipulating all datasets 2.6 Manipulating pairwise", " 2 Iteration Processing multiple files that contain different parts of the same dataset 2.1 Review of visualization and data transformation library(tidyverse) ## Registered S3 methods overwritten by &#39;ggplot2&#39;: ## method from ## [.quosures rlang ## c.quosures rlang ## print.quosures rlang ## Registered S3 method overwritten by &#39;rvest&#39;: ## method from ## read_xml.response xml2 ## ── Attaching packages ────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 3.1.1 ✔ purrr 0.3.2 ## ✔ tibble 2.1.1 ✔ dplyr 0.8.0.1 ## ✔ tidyr 0.8.3 ✔ stringr 1.4.0 ## ✔ readr 1.3.1 ✔ forcats 0.4.0 ## ── Conflicts ───────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(here) 2.1.1 Data We will be working with hourly measurements of weather data (link to data documentation) in four cities (Berlin, Toronto, Tel Aviv and Zurich) between 2019-04-28, 3pm and 2019-04-30, 3pm. Thus we have 49 observations in each city. - time - summary (how to describe the weather in one word) - icon (mix of description of weather plus time of day) - precipIntensity (intensity of precipitation [mm/h]) - precipProbability - temperature - apparentTemperature - dewPoint - humidity - pressure - windSpeed - windGust - windBearing (direction in degrees) - cloudCover - uvIndex - visibility - ozone - precipType Reading in the data, which is stored in MS Excel-Files: berlin &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;berlin.xlsx&quot;)) toronto &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;toronto.xlsx&quot;)) tel_aviv &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;tel_aviv.xlsx&quot;)) zurich &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;zurich.xlsx&quot;)) Create one larger tibble from the four smaller ones: weather_data &lt;- bind_rows( berlin = berlin, toronto = toronto, tel_aviv = tel_aviv, zurich = zurich, .id = &quot;city_code&quot; ) 2.1.2 Exploration weather_data ## # A tibble: 196 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; Example plot of humidity vs. pressure (geom_path() ensures that points are connected according to their order in the tibble): weather_data %&gt;% ggplot(aes(x = pressure, y = humidity, color = city_code)) + geom_path() Barplots of number of occurences of each kind of weather per city: weather_data %&gt;% ggplot(aes(x = city_code)) + geom_bar(aes(fill = summary)) weather_data %&gt;% ggplot(aes(x = city_code)) + geom_bar(aes(fill = summary), position = position_dodge2(&quot;dodge&quot;, preserve = &quot;single&quot;)) Lineplot with different line types and an additional visualisation of the line range (here, difference between apparent and actual temperature): temperature_data &lt;- weather_data %&gt;% select(city_code, time, temperature, apparentTemperature) %&gt;% gather(kind, temperature, -city_code, -time) %&gt;% mutate(apparent = (kind == &quot;apparentTemperature&quot;)) %&gt;% select(-kind) temperature_data %&gt;% ggplot(aes(x = time, color = city_code)) + geom_linerange(data = weather_data, aes(ymin = temperature, ymax = apparentTemperature)) + geom_line(aes(linetype = apparent, y = temperature)) Relation of temperature difference between actual and apparent temperature (cf. line range in last plot) with wind speed, shown as scatter plot. weather_data %&gt;% mutate(apparentTemperatureReduction = temperature - apparentTemperature) %&gt;% filter(city_code != &quot;tel_aviv&quot;) %&gt;% ggplot(aes(x = windSpeed, y = apparentTemperatureReduction)) + geom_point(aes(color = city_code)) 2.1.3 Further possibilities of using {dplyr} to transform data If you want to compare measurements of the same observable at two different points in time, maybe the most straightforward way to do so is to create a new column with an appropriate lag: weather_data %&gt;% group_by(city_code) %&gt;% mutate_at(vars(temperature, pressure, humidity), list(lag = lag)) %&gt;% ungroup() ## # A tibble: 196 x 22 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 17 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt;, temperature_lag &lt;dbl&gt;, ## # pressure_lag &lt;dbl&gt;, humidity_lag &lt;dbl&gt; Count observations per category or combinations of categories: weather_data %&gt;% count(city_code) ## # A tibble: 4 x 2 ## city_code n ## &lt;chr&gt; &lt;int&gt; ## 1 berlin 49 ## 2 tel_aviv 49 ## 3 toronto 49 ## 4 zurich 49 weather_data %&gt;% count(city_code, summary) ## # A tibble: 15 x 3 ## city_code summary n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 berlin Clear 17 ## 2 berlin Mostly Cloudy 11 ## 3 berlin Overcast 18 ## 4 berlin Partly Cloudy 3 ## 5 tel_aviv Clear 34 ## 6 tel_aviv Mostly Cloudy 5 ## 7 tel_aviv Partly Cloudy 10 ## 8 toronto Clear 18 ## 9 toronto Light Rain 1 ## 10 toronto Mostly Cloudy 5 ## 11 toronto Overcast 21 ## 12 toronto Partly Cloudy 4 ## 13 zurich Mostly Cloudy 30 ## 14 zurich Overcast 14 ## 15 zurich Partly Cloudy 5 Use summarize() to create a tibble with mean and maximum temperature for each city: weather_data %&gt;% group_by(city_code) %&gt;% summarize(temperature_mean = mean(temperature), temperature_max = max(temperature)) %&gt;% ungroup() ## # A tibble: 4 x 3 ## city_code temperature_mean temperature_max ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 berlin 12.5 20.0 ## 2 tel_aviv 22.6 28.8 ## 3 toronto 6.39 9.99 ## 4 zurich 7.15 14.3 Compute and display summary data for all numeric variables: weather_data %&gt;% group_by(city_code) %&gt;% summarize_if(is.numeric, list(mean = mean, sd = sd, min = min, max = max)) %&gt;% ungroup() %&gt;% gather(key, value, -city_code) %&gt;% separate(key, into = c(&quot;indicator&quot;, &quot;fun&quot;)) %&gt;% xtabs(value ~ city_code + indicator + fun, .) %&gt;% ftable() ## fun max mean min sd ## city_code indicator ## berlin apparentTemperature 19.98000000 11.62836735 3.45000000 5.07360997 ## cloudCover 1.00000000 0.59734694 0.00000000 0.42339292 ## dewPoint 10.18000000 5.23632653 1.88000000 2.45837742 ## humidity 0.88000000 0.63448980 0.35000000 0.15571156 ## ozone 378.04000000 343.34571429 319.68000000 21.60874350 ## precipIntensity 0.34800000 0.03084286 0.00000000 0.07902264 ## precipProbability 0.54000000 0.06000000 0.00000000 0.13913423 ## pressure 1020.48000000 1018.71714286 1016.10000000 1.19202733 ## temperature 19.98000000 12.49795918 6.14000000 4.10004115 ## uvIndex 5.00000000 1.24489796 0.00000000 1.61413821 ## visibility 16.09000000 15.77102041 10.01000000 1.13380672 ## windBearing 358.00000000 151.59183673 4.00000000 152.79205891 ## windGust 11.14000000 7.59591837 3.67000000 2.18713275 ## windSpeed 5.89000000 4.49326531 3.51000000 0.81341458 ## tel_aviv apparentTemperature 28.77000000 22.64591837 17.15000000 3.15235885 ## cloudCover 0.81000000 0.19693878 0.00000000 0.24908335 ## dewPoint 14.43000000 12.18244898 9.51000000 1.29219376 ## humidity 0.74000000 0.52612245 0.34000000 0.09347050 ## ozone 339.37000000 318.31836735 307.16000000 10.05895835 ## precipIntensity 0.00000000 0.00000000 0.00000000 0.00000000 ## precipProbability 0.00000000 0.00000000 0.00000000 0.00000000 ## pressure 1015.88000000 1013.66265306 1011.73000000 1.12583076 ## temperature 28.77000000 22.64591837 17.15000000 3.15235885 ## uvIndex 10.00000000 2.40816327 0.00000000 3.56439784 ## visibility 16.09000000 15.87163265 10.01000000 1.07987528 ## windBearing 355.00000000 188.36734694 0.00000000 123.84965581 ## windGust 5.53000000 3.47775510 1.66000000 1.19411101 ## windSpeed 4.90000000 2.49285714 0.57000000 1.04899754 ## toronto apparentTemperature 7.88000000 3.27306122 0.49000000 2.24842464 ## cloudCover 1.00000000 0.59510204 0.00000000 0.43183293 ## dewPoint 3.05000000 -1.26653061 -5.17000000 2.69193359 ## humidity 0.82000000 0.59734694 0.37000000 0.14628419 ## ozone 401.89000000 362.02632653 327.57000000 23.42483179 ## precipIntensity 0.84070000 0.08387551 0.00000000 0.16627247 ## precipProbability 0.51000000 0.06653061 0.00000000 0.11739447 ## pressure 1030.07000000 1025.14918367 1019.55000000 3.22083053 ## temperature 9.99000000 6.38795918 3.03000000 2.02387621 ## uvIndex 6.00000000 1.40816327 0.00000000 1.84750245 ## visibility 16.09000000 15.14673469 5.13000000 2.83815256 ## windBearing 357.00000000 140.32653061 2.00000000 129.30831820 ## windGust 11.51000000 7.51020408 2.66000000 2.33711939 ## windSpeed 7.64000000 4.87510204 1.91000000 1.62389080 ## zurich apparentTemperature 14.30000000 6.88551020 2.01000000 3.14469133 ## cloudCover 1.00000000 0.80877551 0.37000000 0.15734295 ## dewPoint 7.23000000 3.38367347 -0.27000000 1.90397030 ## humidity 0.88000000 0.77551020 0.59000000 0.08304269 ## ozone 377.57000000 359.81510204 340.69000000 11.33226737 ## precipIntensity 0.26670000 0.07106939 0.00000000 0.05976032 ## precipProbability 0.29000000 0.13326531 0.00000000 0.07816616 ## pressure 1023.55000000 1021.37612245 1017.40000000 1.62120174 ## temperature 14.30000000 7.14510204 2.01000000 3.07049475 ## uvIndex 4.00000000 1.10204082 0.00000000 1.44690615 ## visibility 16.09000000 12.90938776 3.89000000 4.47872769 ## windBearing 357.00000000 147.61224490 20.00000000 102.66182679 ## windGust 4.76000000 1.98428571 1.07000000 0.95327506 ## windSpeed 4.76000000 1.31244898 0.13000000 0.91823774 2.2 Vectors and columns library(tidyverse) library(here) files &lt;- dir(here(&quot;data/weather&quot;), full.names = TRUE) files ## [1] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx&quot; ## [2] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx&quot; ## [3] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx&quot; ## [4] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx&quot; files_df &lt;- files %&gt;% enframe() files_df ## # A tibble: 4 x 2 ## name value ## &lt;int&gt; &lt;chr&gt; ## 1 1 /home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx ## 2 2 /home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx ## 3 3 /home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx ## 4 4 /home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx files_df_1 &lt;- files %&gt;% enframe(name = NULL) files_df_1 ## # A tibble: 4 x 1 ## value ## &lt;chr&gt; ## 1 /home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx ## 2 /home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx ## 3 /home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx ## 4 /home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx tibble(filename = files) ## # A tibble: 4 x 1 ## filename ## &lt;chr&gt; ## 1 /home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx ## 2 /home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx ## 3 /home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx ## 4 /home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx files_df %&gt;% pull() ## [1] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx&quot; ## [2] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx&quot; ## [3] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx&quot; ## [4] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx&quot; files_df %&gt;% pull(name) ## [1] 1 2 3 4 2.3 Named vectors and two-column tibbles library(tidyverse) library(here) dict &lt;- readxl::read_excel(here(&quot;data/cities.xlsx&quot;)) dict ## # A tibble: 4 x 5 ## city_code weather_filename name lng lat ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 berlin data/weather/berlin.xlsx Berlin 13.4 52.5 ## 2 toronto data/weather/toronto.xlsx Toronto -79.4 43.7 ## 3 tel_aviv data/weather/tel_aviv.xlsx Tel Aviv 34.8 32.1 ## 4 zurich data/weather/zurich.xlsx Zürich 8.54 47.4 dict %&gt;% pull(weather_filename) ## [1] &quot;data/weather/berlin.xlsx&quot; &quot;data/weather/toronto.xlsx&quot; ## [3] &quot;data/weather/tel_aviv.xlsx&quot; &quot;data/weather/zurich.xlsx&quot; dict %&gt;% pull(weather_filename) %&gt;% here() ## [1] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx&quot; ## [2] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx&quot; ## [3] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx&quot; ## [4] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx&quot; dict %&gt;% select(city_code, weather_filename) %&gt;% deframe() ## berlin toronto ## &quot;data/weather/berlin.xlsx&quot; &quot;data/weather/toronto.xlsx&quot; ## tel_aviv zurich ## &quot;data/weather/tel_aviv.xlsx&quot; &quot;data/weather/zurich.xlsx&quot; dict %&gt;% select(city_code, weather_filename) %&gt;% deframe() %&gt;% here() ## [1] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx&quot; ## [2] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx&quot; ## [3] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx&quot; ## [4] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx&quot; dict %&gt;% mutate(weather_filename_here = here(weather_filename)) %&gt;% select(city_code, weather_filename_here) %&gt;% deframe() ## berlin ## &quot;/home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx&quot; ## toronto ## &quot;/home/travis/build/krlmlr/tidyprog/data/weather/toronto.xlsx&quot; ## tel_aviv ## &quot;/home/travis/build/krlmlr/tidyprog/data/weather/tel_aviv.xlsx&quot; ## zurich ## &quot;/home/travis/build/krlmlr/tidyprog/data/weather/zurich.xlsx&quot; 2.4 Processing all files library(tidyverse) library(here) dict &lt;- readxl::read_excel(here(&quot;data/cities.xlsx&quot;)) dict ## # A tibble: 4 x 5 ## city_code weather_filename name lng lat ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 berlin data/weather/berlin.xlsx Berlin 13.4 52.5 ## 2 toronto data/weather/toronto.xlsx Toronto -79.4 43.7 ## 3 tel_aviv data/weather/tel_aviv.xlsx Tel Aviv 34.8 32.1 ## 4 zurich data/weather/zurich.xlsx Zürich 8.54 47.4 input_files &lt;- dict %&gt;% select(city_code, weather_filename) %&gt;% deframe() input_files ## berlin toronto ## &quot;data/weather/berlin.xlsx&quot; &quot;data/weather/toronto.xlsx&quot; ## tel_aviv zurich ## &quot;data/weather/tel_aviv.xlsx&quot; &quot;data/weather/zurich.xlsx&quot; names(input_files) ## [1] &quot;berlin&quot; &quot;toronto&quot; &quot;tel_aviv&quot; &quot;zurich&quot; input_files[1] ## berlin ## &quot;data/weather/berlin.xlsx&quot; input_files[[1]] ## [1] &quot;data/weather/berlin.xlsx&quot; input_files[[&quot;berlin&quot;]] ## [1] &quot;data/weather/berlin.xlsx&quot; readxl::read_excel(here(input_files[[1]])) ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0 0 ## 2 2019-04-28 16:00:00 Mostly… part… 0 0 ## 3 2019-04-28 17:00:00 Mostly… part… 0 0 ## 4 2019-04-28 18:00:00 Overca… clou… 0 0 ## 5 2019-04-28 19:00:00 Overca… clou… 0 0 ## 6 2019-04-28 20:00:00 Mostly… part… 0 0 ## 7 2019-04-28 21:00:00 Mostly… part… 0 0 ## 8 2019-04-28 22:00:00 Mostly… part… 0 0 ## 9 2019-04-28 23:00:00 Mostly… part… 0 0 ## 10 2019-04-29 00:00:00 Mostly… part… 0 0 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; input_data &lt;- map(input_files, ~ readxl::read_excel(here(.))) input_data ## $berlin ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0 0 ## 2 2019-04-28 16:00:00 Mostly… part… 0 0 ## 3 2019-04-28 17:00:00 Mostly… part… 0 0 ## 4 2019-04-28 18:00:00 Overca… clou… 0 0 ## 5 2019-04-28 19:00:00 Overca… clou… 0 0 ## 6 2019-04-28 20:00:00 Mostly… part… 0 0 ## 7 2019-04-28 21:00:00 Mostly… part… 0 0 ## 8 2019-04-28 22:00:00 Mostly… part… 0 0 ## 9 2019-04-28 23:00:00 Mostly… part… 0 0 ## 10 2019-04-29 00:00:00 Mostly… part… 0 0 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; ## ## $toronto ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Partly… part… 0 0 ## 2 2019-04-28 16:00:00 Clear clea… 0 0 ## 3 2019-04-28 17:00:00 Clear clea… 0 0 ## 4 2019-04-28 18:00:00 Clear clea… 0.0508 0.04 ## 5 2019-04-28 19:00:00 Clear clea… 0.0483 0.03 ## 6 2019-04-28 20:00:00 Clear clea… 0.0203 0.02 ## 7 2019-04-28 21:00:00 Clear clea… 0.0102 0.02 ## 8 2019-04-28 22:00:00 Clear clea… 0 0 ## 9 2019-04-28 23:00:00 Clear clea… 0.0356 0.02 ## 10 2019-04-29 00:00:00 Partly… part… 0.0381 0.02 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; ## ## $tel_aviv ## # A tibble: 49 x 17 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Partly… part… 0 0 ## 2 2019-04-28 16:00:00 Clear clea… 0 0 ## 3 2019-04-28 17:00:00 Clear clea… 0 0 ## 4 2019-04-28 18:00:00 Clear clea… 0 0 ## 5 2019-04-28 19:00:00 Clear clea… 0 0 ## 6 2019-04-28 20:00:00 Clear clea… 0 0 ## 7 2019-04-28 21:00:00 Clear clea… 0 0 ## 8 2019-04-28 22:00:00 Clear clea… 0 0 ## 9 2019-04-28 23:00:00 Clear clea… 0 0 ## 10 2019-04-29 00:00:00 Clear clea… 0 0 ## # … with 39 more rows, and 12 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt; ## ## $zurich ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0.267 0.28 ## 2 2019-04-28 16:00:00 Mostly… part… 0.198 0.27 ## 3 2019-04-28 17:00:00 Mostly… part… 0.137 0.25 ## 4 2019-04-28 18:00:00 Mostly… part… 0.0889 0.2 ## 5 2019-04-28 19:00:00 Mostly… part… 0.0406 0.14 ## 6 2019-04-28 20:00:00 Partly… part… 0.0076 0.09 ## 7 2019-04-28 21:00:00 Partly… part… 0 0 ## 8 2019-04-28 22:00:00 Partly… part… 0 0 ## 9 2019-04-28 23:00:00 Partly… part… 0.0076 0.04 ## 10 2019-04-29 00:00:00 Mostly… part… 0.0127 0.05 ## # … with 39 more rows, and 13 more variables: precipType &lt;chr&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt; input_data[[1]] ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0 0 ## 2 2019-04-28 16:00:00 Mostly… part… 0 0 ## 3 2019-04-28 17:00:00 Mostly… part… 0 0 ## 4 2019-04-28 18:00:00 Overca… clou… 0 0 ## 5 2019-04-28 19:00:00 Overca… clou… 0 0 ## 6 2019-04-28 20:00:00 Mostly… part… 0 0 ## 7 2019-04-28 21:00:00 Mostly… part… 0 0 ## 8 2019-04-28 22:00:00 Mostly… part… 0 0 ## 9 2019-04-28 23:00:00 Mostly… part… 0 0 ## 10 2019-04-29 00:00:00 Mostly… part… 0 0 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; names(input_data) ## [1] &quot;berlin&quot; &quot;toronto&quot; &quot;tel_aviv&quot; &quot;zurich&quot; input_files %&gt;% map(~ readxl::read_excel(here(.))) ## $berlin ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0 0 ## 2 2019-04-28 16:00:00 Mostly… part… 0 0 ## 3 2019-04-28 17:00:00 Mostly… part… 0 0 ## 4 2019-04-28 18:00:00 Overca… clou… 0 0 ## 5 2019-04-28 19:00:00 Overca… clou… 0 0 ## 6 2019-04-28 20:00:00 Mostly… part… 0 0 ## 7 2019-04-28 21:00:00 Mostly… part… 0 0 ## 8 2019-04-28 22:00:00 Mostly… part… 0 0 ## 9 2019-04-28 23:00:00 Mostly… part… 0 0 ## 10 2019-04-29 00:00:00 Mostly… part… 0 0 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; ## ## $toronto ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Partly… part… 0 0 ## 2 2019-04-28 16:00:00 Clear clea… 0 0 ## 3 2019-04-28 17:00:00 Clear clea… 0 0 ## 4 2019-04-28 18:00:00 Clear clea… 0.0508 0.04 ## 5 2019-04-28 19:00:00 Clear clea… 0.0483 0.03 ## 6 2019-04-28 20:00:00 Clear clea… 0.0203 0.02 ## 7 2019-04-28 21:00:00 Clear clea… 0.0102 0.02 ## 8 2019-04-28 22:00:00 Clear clea… 0 0 ## 9 2019-04-28 23:00:00 Clear clea… 0.0356 0.02 ## 10 2019-04-29 00:00:00 Partly… part… 0.0381 0.02 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; ## ## $tel_aviv ## # A tibble: 49 x 17 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Partly… part… 0 0 ## 2 2019-04-28 16:00:00 Clear clea… 0 0 ## 3 2019-04-28 17:00:00 Clear clea… 0 0 ## 4 2019-04-28 18:00:00 Clear clea… 0 0 ## 5 2019-04-28 19:00:00 Clear clea… 0 0 ## 6 2019-04-28 20:00:00 Clear clea… 0 0 ## 7 2019-04-28 21:00:00 Clear clea… 0 0 ## 8 2019-04-28 22:00:00 Clear clea… 0 0 ## 9 2019-04-28 23:00:00 Clear clea… 0 0 ## 10 2019-04-29 00:00:00 Clear clea… 0 0 ## # … with 39 more rows, and 12 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt; ## ## $zurich ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0.267 0.28 ## 2 2019-04-28 16:00:00 Mostly… part… 0.198 0.27 ## 3 2019-04-28 17:00:00 Mostly… part… 0.137 0.25 ## 4 2019-04-28 18:00:00 Mostly… part… 0.0889 0.2 ## 5 2019-04-28 19:00:00 Mostly… part… 0.0406 0.14 ## 6 2019-04-28 20:00:00 Partly… part… 0.0076 0.09 ## 7 2019-04-28 21:00:00 Partly… part… 0 0 ## 8 2019-04-28 22:00:00 Partly… part… 0 0 ## 9 2019-04-28 23:00:00 Partly… part… 0.0076 0.04 ## 10 2019-04-29 00:00:00 Mostly… part… 0.0127 0.05 ## # … with 39 more rows, and 13 more variables: precipType &lt;chr&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt; 2.5 Manipulating all datasets library(tidyverse) library(here) dict &lt;- readxl::read_excel(here(&quot;data/cities.xlsx&quot;)) dict ## # A tibble: 4 x 5 ## city_code weather_filename name lng lat ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 berlin data/weather/berlin.xlsx Berlin 13.4 52.5 ## 2 toronto data/weather/toronto.xlsx Toronto -79.4 43.7 ## 3 tel_aviv data/weather/tel_aviv.xlsx Tel Aviv 34.8 32.1 ## 4 zurich data/weather/zurich.xlsx Zürich 8.54 47.4 input_data &lt;- dict %&gt;% select(city_code, weather_filename) %&gt;% deframe() %&gt;% map(~ readxl::read_excel(here(.))) input_data %&gt;% map(~ select(., time, contains(&quot;emperature&quot;))) ## $berlin ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 13.4 13.4 ## 2 2019-04-28 16:00:00 13.6 13.6 ## 3 2019-04-28 17:00:00 14.1 14.1 ## 4 2019-04-28 18:00:00 13.7 13.7 ## 5 2019-04-28 19:00:00 12.6 12.6 ## 6 2019-04-28 20:00:00 11.6 11.6 ## 7 2019-04-28 21:00:00 10.7 10.7 ## 8 2019-04-28 22:00:00 10.2 10.2 ## 9 2019-04-28 23:00:00 9.78 7.73 ## 10 2019-04-29 00:00:00 9.48 7.31 ## # … with 39 more rows ## ## $toronto ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 7.46 3.96 ## 2 2019-04-28 16:00:00 8.17 5.04 ## 3 2019-04-28 17:00:00 8.82 6.52 ## 4 2019-04-28 18:00:00 9.37 7.57 ## 5 2019-04-28 19:00:00 9.79 7.88 ## 6 2019-04-28 20:00:00 9.99 7.79 ## 7 2019-04-28 21:00:00 9.74 7.32 ## 8 2019-04-28 22:00:00 9.14 6.57 ## 9 2019-04-28 23:00:00 8.17 5.46 ## 10 2019-04-29 00:00:00 7.23 4.42 ## # … with 39 more rows ## ## $tel_aviv ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 23.9 23.9 ## 2 2019-04-28 16:00:00 23.1 23.1 ## 3 2019-04-28 17:00:00 22.4 22.4 ## 4 2019-04-28 18:00:00 22.0 22.0 ## 5 2019-04-28 19:00:00 21.6 21.6 ## 6 2019-04-28 20:00:00 21.5 21.5 ## 7 2019-04-28 21:00:00 21.2 21.2 ## 8 2019-04-28 22:00:00 20.8 20.8 ## 9 2019-04-28 23:00:00 20.2 20.2 ## 10 2019-04-29 00:00:00 19.8 19.8 ## # … with 39 more rows ## ## $zurich ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 6.96 3.89 ## 2 2019-04-28 16:00:00 7.14 4.33 ## 3 2019-04-28 17:00:00 7.32 5.41 ## 4 2019-04-28 18:00:00 7.08 6.02 ## 5 2019-04-28 19:00:00 6.37 5.49 ## 6 2019-04-28 20:00:00 5.49 5.49 ## 7 2019-04-28 21:00:00 4.48 4.48 ## 8 2019-04-28 22:00:00 3.87 3.87 ## 9 2019-04-28 23:00:00 3.52 3.52 ## 10 2019-04-29 00:00:00 3.29 3.29 ## # … with 39 more rows input_data %&gt;% map(~ select(., time, contains(&quot;emperature&quot;))) %&gt;% map(~ filter(., temperature &gt;= 14)) ## $berlin ## # A tibble: 16 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 17:00:00 14.1 14.1 ## 2 2019-04-29 12:00:00 15.6 15.6 ## 3 2019-04-29 13:00:00 17.4 17.4 ## 4 2019-04-29 14:00:00 19.0 19.0 ## 5 2019-04-29 15:00:00 20.0 20.0 ## 6 2019-04-29 16:00:00 19.8 19.8 ## 7 2019-04-29 17:00:00 18.6 18.6 ## 8 2019-04-29 18:00:00 16.7 16.7 ## 9 2019-04-29 19:00:00 14.8 14.8 ## 10 2019-04-30 09:00:00 14.9 14.9 ## 11 2019-04-30 10:00:00 16.5 16.5 ## 12 2019-04-30 11:00:00 18.0 18.0 ## 13 2019-04-30 12:00:00 18.8 18.8 ## 14 2019-04-30 13:00:00 19.0 19.0 ## 15 2019-04-30 14:00:00 18.7 18.7 ## 16 2019-04-30 15:00:00 18.3 18.3 ## ## $toronto ## # A tibble: 0 x 3 ## # … with 3 variables: time &lt;dttm&gt;, temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt; ## ## $tel_aviv ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 23.9 23.9 ## 2 2019-04-28 16:00:00 23.1 23.1 ## 3 2019-04-28 17:00:00 22.4 22.4 ## 4 2019-04-28 18:00:00 22.0 22.0 ## 5 2019-04-28 19:00:00 21.6 21.6 ## 6 2019-04-28 20:00:00 21.5 21.5 ## 7 2019-04-28 21:00:00 21.2 21.2 ## 8 2019-04-28 22:00:00 20.8 20.8 ## 9 2019-04-28 23:00:00 20.2 20.2 ## 10 2019-04-29 00:00:00 19.8 19.8 ## # … with 39 more rows ## ## $zurich ## # A tibble: 1 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-30 15:00:00 14.3 14.3 manipulator &lt;- function(data) { data %&gt;% select(time, contains(&quot;emperature&quot;)) %&gt;% filter(temperature &gt;= 14) } manipulator ## function(data) { ## data %&gt;% ## select(time, contains(&quot;emperature&quot;)) %&gt;% ## filter(temperature &gt;= 14) ## } ## &lt;environment: 0x1c74d98&gt; manipulator(input_data[[4]]) ## # A tibble: 1 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-30 15:00:00 14.3 14.3 manipulated_data &lt;- map(input_data, ~ manipulator(.)) manipulated_data ## $berlin ## # A tibble: 16 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 17:00:00 14.1 14.1 ## 2 2019-04-29 12:00:00 15.6 15.6 ## 3 2019-04-29 13:00:00 17.4 17.4 ## 4 2019-04-29 14:00:00 19.0 19.0 ## 5 2019-04-29 15:00:00 20.0 20.0 ## 6 2019-04-29 16:00:00 19.8 19.8 ## 7 2019-04-29 17:00:00 18.6 18.6 ## 8 2019-04-29 18:00:00 16.7 16.7 ## 9 2019-04-29 19:00:00 14.8 14.8 ## 10 2019-04-30 09:00:00 14.9 14.9 ## 11 2019-04-30 10:00:00 16.5 16.5 ## 12 2019-04-30 11:00:00 18.0 18.0 ## 13 2019-04-30 12:00:00 18.8 18.8 ## 14 2019-04-30 13:00:00 19.0 19.0 ## 15 2019-04-30 14:00:00 18.7 18.7 ## 16 2019-04-30 15:00:00 18.3 18.3 ## ## $toronto ## # A tibble: 0 x 3 ## # … with 3 variables: time &lt;dttm&gt;, temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt; ## ## $tel_aviv ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 23.9 23.9 ## 2 2019-04-28 16:00:00 23.1 23.1 ## 3 2019-04-28 17:00:00 22.4 22.4 ## 4 2019-04-28 18:00:00 22.0 22.0 ## 5 2019-04-28 19:00:00 21.6 21.6 ## 6 2019-04-28 20:00:00 21.5 21.5 ## 7 2019-04-28 21:00:00 21.2 21.2 ## 8 2019-04-28 22:00:00 20.8 20.8 ## 9 2019-04-28 23:00:00 20.2 20.2 ## 10 2019-04-29 00:00:00 19.8 19.8 ## # … with 39 more rows ## ## $zurich ## # A tibble: 1 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-30 15:00:00 14.3 14.3 map(input_data, manipulator) ## $berlin ## # A tibble: 16 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 17:00:00 14.1 14.1 ## 2 2019-04-29 12:00:00 15.6 15.6 ## 3 2019-04-29 13:00:00 17.4 17.4 ## 4 2019-04-29 14:00:00 19.0 19.0 ## 5 2019-04-29 15:00:00 20.0 20.0 ## 6 2019-04-29 16:00:00 19.8 19.8 ## 7 2019-04-29 17:00:00 18.6 18.6 ## 8 2019-04-29 18:00:00 16.7 16.7 ## 9 2019-04-29 19:00:00 14.8 14.8 ## 10 2019-04-30 09:00:00 14.9 14.9 ## 11 2019-04-30 10:00:00 16.5 16.5 ## 12 2019-04-30 11:00:00 18.0 18.0 ## 13 2019-04-30 12:00:00 18.8 18.8 ## 14 2019-04-30 13:00:00 19.0 19.0 ## 15 2019-04-30 14:00:00 18.7 18.7 ## 16 2019-04-30 15:00:00 18.3 18.3 ## ## $toronto ## # A tibble: 0 x 3 ## # … with 3 variables: time &lt;dttm&gt;, temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt; ## ## $tel_aviv ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 23.9 23.9 ## 2 2019-04-28 16:00:00 23.1 23.1 ## 3 2019-04-28 17:00:00 22.4 22.4 ## 4 2019-04-28 18:00:00 22.0 22.0 ## 5 2019-04-28 19:00:00 21.6 21.6 ## 6 2019-04-28 20:00:00 21.5 21.5 ## 7 2019-04-28 21:00:00 21.2 21.2 ## 8 2019-04-28 22:00:00 20.8 20.8 ## 9 2019-04-28 23:00:00 20.2 20.2 ## 10 2019-04-29 00:00:00 19.8 19.8 ## # … with 39 more rows ## ## $zurich ## # A tibble: 1 x 3 ## time temperature apparentTemperature ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-30 15:00:00 14.3 14.3 output_filenames &lt;- tempfile(names(input_data), fileext = &quot;.csv&quot;) map2(manipulated_data, output_filenames, ~ readr::write_csv(..1, ..2)) ## $berlin ## # A tibble: 16 x 3 ## time temperature apparentTemperature ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28T17:00:00Z 14.1 14.1 ## 2 2019-04-29T12:00:00Z 15.6 15.6 ## 3 2019-04-29T13:00:00Z 17.4 17.4 ## 4 2019-04-29T14:00:00Z 19.0 19.0 ## 5 2019-04-29T15:00:00Z 20.0 20.0 ## 6 2019-04-29T16:00:00Z 19.8 19.8 ## 7 2019-04-29T17:00:00Z 18.6 18.6 ## 8 2019-04-29T18:00:00Z 16.7 16.7 ## 9 2019-04-29T19:00:00Z 14.8 14.8 ## 10 2019-04-30T09:00:00Z 14.9 14.9 ## 11 2019-04-30T10:00:00Z 16.5 16.5 ## 12 2019-04-30T11:00:00Z 18.0 18.0 ## 13 2019-04-30T12:00:00Z 18.8 18.8 ## 14 2019-04-30T13:00:00Z 19.0 19.0 ## 15 2019-04-30T14:00:00Z 18.7 18.7 ## 16 2019-04-30T15:00:00Z 18.3 18.3 ## ## $toronto ## # A tibble: 0 x 3 ## # … with 3 variables: time &lt;chr&gt;, temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt; ## ## $tel_aviv ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28T15:00:00Z 23.9 23.9 ## 2 2019-04-28T16:00:00Z 23.1 23.1 ## 3 2019-04-28T17:00:00Z 22.4 22.4 ## 4 2019-04-28T18:00:00Z 22.0 22.0 ## 5 2019-04-28T19:00:00Z 21.6 21.6 ## 6 2019-04-28T20:00:00Z 21.5 21.5 ## 7 2019-04-28T21:00:00Z 21.2 21.2 ## 8 2019-04-28T22:00:00Z 20.8 20.8 ## 9 2019-04-28T23:00:00Z 20.2 20.2 ## 10 2019-04-29T00:00:00Z 19.8 19.8 ## # … with 39 more rows ## ## $zurich ## # A tibble: 1 x 3 ## time temperature apparentTemperature ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-30T15:00:00Z 14.3 14.3 walk2(manipulated_data, output_filenames, ~ readr::write_csv(..1, ..2)) 2.6 Manipulating pairwise library(tidyverse) library(here) dict &lt;- readxl::read_excel(here(&quot;data/cities.xlsx&quot;)) dict ## # A tibble: 4 x 5 ## city_code weather_filename name lng lat ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 berlin data/weather/berlin.xlsx Berlin 13.4 52.5 ## 2 toronto data/weather/toronto.xlsx Toronto -79.4 43.7 ## 3 tel_aviv data/weather/tel_aviv.xlsx Tel Aviv 34.8 32.1 ## 4 zurich data/weather/zurich.xlsx Zürich 8.54 47.4 manipulator &lt;- function(data) { data %&gt;% select(time, contains(&quot;emperature&quot;)) %&gt;% filter(temperature &gt;= 14) } manipulated_data &lt;- dict %&gt;% select(city_code, weather_filename) %&gt;% deframe() %&gt;% map(~ readxl::read_excel(here(.))) %&gt;% map(manipulator) output_filenames &lt;- tempfile(names(manipulated_data), fileext = &quot;.csv&quot;) output_filenames ## [1] &quot;/tmp/RtmpQLpfgY/berlin2b9c218f8026.csv&quot; ## [2] &quot;/tmp/RtmpQLpfgY/toronto2b9c28a75780.csv&quot; ## [3] &quot;/tmp/RtmpQLpfgY/tel_aviv2b9c71c74f3.csv&quot; ## [4] &quot;/tmp/RtmpQLpfgY/zurich2b9c84e8f85.csv&quot; map2(manipulated_data, output_filenames, ~ readr::write_csv(..1, ..2)) ## $berlin ## # A tibble: 16 x 3 ## time temperature apparentTemperature ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28T17:00:00Z 14.1 14.1 ## 2 2019-04-29T12:00:00Z 15.6 15.6 ## 3 2019-04-29T13:00:00Z 17.4 17.4 ## 4 2019-04-29T14:00:00Z 19.0 19.0 ## 5 2019-04-29T15:00:00Z 20.0 20.0 ## 6 2019-04-29T16:00:00Z 19.8 19.8 ## 7 2019-04-29T17:00:00Z 18.6 18.6 ## 8 2019-04-29T18:00:00Z 16.7 16.7 ## 9 2019-04-29T19:00:00Z 14.8 14.8 ## 10 2019-04-30T09:00:00Z 14.9 14.9 ## 11 2019-04-30T10:00:00Z 16.5 16.5 ## 12 2019-04-30T11:00:00Z 18.0 18.0 ## 13 2019-04-30T12:00:00Z 18.8 18.8 ## 14 2019-04-30T13:00:00Z 19.0 19.0 ## 15 2019-04-30T14:00:00Z 18.7 18.7 ## 16 2019-04-30T15:00:00Z 18.3 18.3 ## ## $toronto ## # A tibble: 0 x 3 ## # … with 3 variables: time &lt;chr&gt;, temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt; ## ## $tel_aviv ## # A tibble: 49 x 3 ## time temperature apparentTemperature ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28T15:00:00Z 23.9 23.9 ## 2 2019-04-28T16:00:00Z 23.1 23.1 ## 3 2019-04-28T17:00:00Z 22.4 22.4 ## 4 2019-04-28T18:00:00Z 22.0 22.0 ## 5 2019-04-28T19:00:00Z 21.6 21.6 ## 6 2019-04-28T20:00:00Z 21.5 21.5 ## 7 2019-04-28T21:00:00Z 21.2 21.2 ## 8 2019-04-28T22:00:00Z 20.8 20.8 ## 9 2019-04-28T23:00:00Z 20.2 20.2 ## 10 2019-04-29T00:00:00Z 19.8 19.8 ## # … with 39 more rows ## ## $zurich ## # A tibble: 1 x 3 ## time temperature apparentTemperature ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-30T15:00:00Z 14.3 14.3 walk2(manipulated_data, output_filenames, ~ readr::write_csv(..1, ..2)) "],
["functions.html", "3 Functions 3.1 Basics 3.2 Arguments 3.3 Use case: Intermediate variables 3.4 Default values 3.5 Multiple arguments 3.6 Argument matching 3.7 Scope 3.8 Pure functions and side effects 3.9 Control flow 3.10 Closures", " 3 Functions Structuring the code to avoid too much copy-pasting 3.1 Basics library(tidyverse) library(here) 3.1.1 Designing functions Create functions for tasks that need to be executed frequently. read_weather_data &lt;- function() { # Read all files berlin &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;berlin.xlsx&quot;)) toronto &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;toronto.xlsx&quot;)) tel_aviv &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;tel_aviv.xlsx&quot;)) zurich &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;zurich.xlsx&quot;)) # Create ensemble dataset weather_data &lt;- bind_rows( berlin = berlin, toronto = toronto, tel_aviv = tel_aviv, zurich = zurich, .id = &quot;city_code&quot; ) # Return it weather_data } Display the code of any function by writing its name without the subsequent parentheses: read_weather_data ## function() { ## # Read all files ## berlin &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;berlin.xlsx&quot;)) ## toronto &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;toronto.xlsx&quot;)) ## tel_aviv &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;tel_aviv.xlsx&quot;)) ## zurich &lt;- readxl::read_excel(here(&quot;data/weather&quot;, &quot;zurich.xlsx&quot;)) ## ## # Create ensemble dataset ## weather_data &lt;- bind_rows( ## berlin = berlin, ## toronto = toronto, ## tel_aviv = tel_aviv, ## zurich = zurich, ## .id = &quot;city_code&quot; ## ) ## ## # Return it ## weather_data ## } ## &lt;environment: 0x1c74d98&gt; Execute the function by adding the parentheses: read_weather_data() ## # A tibble: 196 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; List R-objects in an environment: ls() ## [1] &quot;read_weather_data&quot; Assign function values to a variable: weather_data &lt;- read_weather_data() 3.2 Arguments library(tidyverse) library(here) Functions with arguments: weather_path &lt;- function(filename) { # Returned value here(&quot;data/weather&quot;, filename) } Call functions from within functions: read_weather_data &lt;- function() { # Read all files berlin &lt;- readxl::read_excel(weather_path(&quot;berlin.xlsx&quot;)) toronto &lt;- readxl::read_excel(weather_path(&quot;toronto.xlsx&quot;)) tel_aviv &lt;- readxl::read_excel(weather_path(&quot;tel_aviv.xlsx&quot;)) zurich &lt;- readxl::read_excel(weather_path(&quot;zurich.xlsx&quot;)) # Create ensemble dataset weather_data &lt;- bind_rows( berlin = berlin, toronto = toronto, tel_aviv = tel_aviv, zurich = zurich, .id = &quot;city_code&quot; ) # Return it weather_data } Testing the new function by running it: read_weather_data() ## # A tibble: 196 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; 3.3 Use case: Intermediate variables library(tidyverse) library(here) weather_path &lt;- function(filename) { # Returned value here(&quot;data/weather&quot;, filename) } Functions can help to avoid using intermediate variables: read_weather_file &lt;- function(filename) { readxl::read_excel(weather_path(filename)) } read_weather_data &lt;- function() { # Create ensemble dataset from files on disk weather_data &lt;- bind_rows( berlin = read_weather_file(&quot;berlin.xlsx&quot;), toronto = read_weather_file(&quot;toronto.xlsx&quot;), tel_aviv = read_weather_file(&quot;tel_aviv.xlsx&quot;), zurich = read_weather_file(&quot;zurich.xlsx&quot;), .id = &quot;city_code&quot; ) # Return it weather_data } read_weather_data() ## # A tibble: 196 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; get_weather_for &lt;- function(city) { filename &lt;- paste0(city, &quot;.xlsx&quot;) readxl::read_excel( paste0( weather_path(filename) ) ) } weather_path_for &lt;- function(city) { here(&quot;data/weather&quot;, paste0(city, &quot;.xlsx&quot;)) } get_weather_for2 &lt;- function(city) { readxl::read_excel(weather_path_for(city)) } read_weather_data &lt;- function() { # Create ensemble dataset from files on disk weather_data &lt;- bind_rows( berlin = get_weather_for2(&quot;berlin&quot;), toronto = get_weather_for2(&quot;toronto&quot;), tel_aviv = get_weather_for2(&quot;tel_aviv&quot;), zurich = get_weather_for2(&quot;zurich&quot;), .id = &quot;city_code&quot; ) # Return it weather_data } read_weather_data() ## # A tibble: 196 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; 3.4 Default values library(tidyverse) library(here) library(conflicted) conflict_prefer(&quot;filter&quot;, &quot;dplyr&quot;) ## [conflicted] Will prefer dplyr::filter over any other package weather_path &lt;- function(filename) { # Returned value here(&quot;data/weather&quot;, filename) } read_weather_file &lt;- function(filename) { readxl::read_excel(weather_path(filename)) } Provide default values for parameters: read_weather_data &lt;- function(omit_zurich = FALSE) { # Create ensemble dataset from files on disk weather_data &lt;- bind_rows( berlin = read_weather_file(&quot;berlin.xlsx&quot;), toronto = read_weather_file(&quot;toronto.xlsx&quot;), tel_aviv = read_weather_file(&quot;tel_aviv.xlsx&quot;), zurich = read_weather_file(&quot;zurich.xlsx&quot;), .id = &quot;city_code&quot; ) # Return it (filtered) weather_data %&gt;% filter( !(city_code == &quot;zurich&quot; &amp; omit_zurich) ) } Set arguments with default values explicitly with or without using the name or leave them out to use the default value: read_weather_data(TRUE) ## # A tibble: 147 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 137 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; read_weather_data(omit_zurich = TRUE) ## # A tibble: 147 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 137 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; read_weather_data() ## # A tibble: 196 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; 3.5 Multiple arguments library(tidyverse) library(here) weather_path &lt;- function(filename) { # Returned value here(&quot;data/weather&quot;, filename) } read_weather_file &lt;- function(filename) { readxl::read_excel(weather_path(filename)) } Multiple function arguments: read_weather_data &lt;- function(omit_zurich = FALSE, omit_toronto = FALSE) { # Create ensemble dataset from files on disk weather_data &lt;- bind_rows( berlin = read_weather_file(&quot;berlin.xlsx&quot;), toronto = read_weather_file(&quot;toronto.xlsx&quot;), tel_aviv = read_weather_file(&quot;tel_aviv.xlsx&quot;), zurich = read_weather_file(&quot;zurich.xlsx&quot;), .id = &quot;city_code&quot; ) # Return it (filtered) weather_data %&gt;% filter( !(city_code == &quot;zurich&quot; &amp; omit_zurich) ) %&gt;% filter( !(city_code == &quot;toronto&quot; &amp; omit_toronto) ) } Ellipsis (...) for list of arguments of unspecified length. Useful for passing arguments downstream: weather_path &lt;- function(...) { # All arguments are passed on here(&quot;data/weather&quot;, ...) } weather_path(&quot;berlin.xlsx&quot;) ## [1] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/berlin.xlsx&quot; weather_path(&quot;some&quot;, &quot;subdir&quot;, &quot;with&quot;, &quot;a&quot;, &quot;file.csv&quot;) ## [1] &quot;/home/travis/build/krlmlr/tidyprog/data/weather/some/subdir/with/a/file.csv&quot; Mind, that despite altering the original function and adding new features to it, the original call still works as before: read_weather_data() ## # A tibble: 196 x 19 ## city_code time summary icon precipIntensity ## &lt;chr&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 berlin 2019-04-28 15:00:00 Mostly… part… 0 ## 2 berlin 2019-04-28 16:00:00 Mostly… part… 0 ## 3 berlin 2019-04-28 17:00:00 Mostly… part… 0 ## 4 berlin 2019-04-28 18:00:00 Overca… clou… 0 ## 5 berlin 2019-04-28 19:00:00 Overca… clou… 0 ## 6 berlin 2019-04-28 20:00:00 Mostly… part… 0 ## 7 berlin 2019-04-28 21:00:00 Mostly… part… 0 ## 8 berlin 2019-04-28 22:00:00 Mostly… part… 0 ## 9 berlin 2019-04-28 23:00:00 Mostly… part… 0 ## 10 berlin 2019-04-29 00:00:00 Mostly… part… 0 ## # … with 186 more rows, and 14 more variables: precipProbability &lt;dbl&gt;, ## # temperature &lt;dbl&gt;, apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, ## # humidity &lt;dbl&gt;, pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, ## # windBearing &lt;dbl&gt;, cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ## # ozone &lt;dbl&gt;, precipType &lt;chr&gt; 3.5.1 Exercise read_weather_data(TRUE, omit_z = FALSE) %&gt;% count(city_code) ## # A tibble: 3 x 2 ## city_code n ## &lt;chr&gt; &lt;int&gt; ## 1 berlin 49 ## 2 tel_aviv 49 ## 3 zurich 49 See the next section for ideas on avoiding this behavior. 3.6 Argument matching Named arguments are assigned first, after that remaining slots are filled from left to right. use_names &lt;- function(a = 1, b = 2) { list(a = a, b = b) } use_names(3, 4) ## $a ## [1] 3 ## ## $b ## [1] 4 use_names(a = 3, 4) ## $a ## [1] 3 ## ## $b ## [1] 4 use_names(3, a = 4) ## $a ## [1] 4 ## ## $b ## [1] 3 use_names(a = 3, b = 4) ## $a ## [1] 3 ## ## $b ## [1] 4 The ellipsis can be used to enfore the user to name the function parameters when setting them: enforce_names &lt;- function(..., a = 1, b = 2) { list(a = a, b = b) } enforce_names(3, 4) ## $a ## [1] 1 ## ## $b ## [1] 2 enforce_names(a = 3, 4) ## $a ## [1] 3 ## ## $b ## [1] 2 enforce_names(a = 3, b = 4) ## $a ## [1] 3 ## ## $b ## [1] 4 Inside a function with an ellipsis as a parameter, you can capture the ellipsis with list(): ellipsis_test &lt;- function(...) { args &lt;- list(...) names(args) } ellipsis_test(a = 1, 2, c = 3:5) ## [1] &quot;a&quot; &quot;&quot; &quot;c&quot; 3.6.1 Exercise Naming, not naming or partly naming parameters in functions calls? What does the following return and why? use_some_names &lt;- function(a = 1, ..., b = 2) { list(a = a, b = b) } use_some_names(3, 4) ## $a ## [1] 3 ## ## $b ## [1] 2 use_some_names(a = 3, 4) ## $a ## [1] 3 ## ## $b ## [1] 2 use_some_names(3, a = 4) ## $a ## [1] 4 ## ## $b ## [1] 2 use_some_names(a = 3, b = 4) ## $a ## [1] 3 ## ## $b ## [1] 4 use_some_names(b = 4, 3) ## $a ## [1] 3 ## ## $b ## [1] 4 use_always_names &lt;- function(..., a = 1, b = 2) { extra_args &lt;- list(...) stopifnot(length(extra_args) == 0) list(a = a, b = b) } try(use_always_names(3, 4)) ## Error in use_always_names(3, 4) : length(extra_args) == 0 is not TRUE try(use_always_names(a = 3, 4)) ## Error in use_always_names(a = 3, 4) : length(extra_args) == 0 is not TRUE try(use_always_names(3, a = 4)) ## Error in use_always_names(3, a = 4) : length(extra_args) == 0 is not TRUE try(use_always_names(b = 4, 3)) ## Error in use_always_names(b = 4, 3) : length(extra_args) == 0 is not TRUE use_always_names(a = 3, b = 4) ## $a ## [1] 3 ## ## $b ## [1] 4 3.7 Scope When working with functions, it is important to be aware of the scope of objects, i.e. what is known in which context? a &lt;- 5 a is now an object of the global environemnt. A function can access global variables: f &lt;- function() { a } f() ## [1] 5 On the other hand, a variable which is defined inside a function, will not be known outside of that function. Respectively, it won’t overwrite the value of global variables. f &lt;- function() { a &lt;- 2 a } f() ## [1] 2 a ## [1] 5 Global variables are a (hidden) part of a function’s interface. Best practice: functions should be self-contained, independent of global variables. invisible() 3.8 Pure functions and side effects library(tidyverse) Functions should do one thing, and do it well.1 Pure function: called for its return value, no side effects: pure_function &lt;- function(x) { x + 1 } pure_function(1) ## [1] 2 Function with side effect: called for its side effect, returns input (here invisibly; assigning is possible): side_effect_function &lt;- function(x) { file &lt;- tempfile() writeLines(format(x), tempfile()) print(x) message(x, &quot; written to &quot;, file) invisible(x) } side_effect_function(2) ## [1] 2 ## 2 written to /tmp/RtmpQLpfgY/file2b9c164dd2dc Separation helps isolate the side effects. If side effect functions return the input, they remain composable with pure functions: 5 %&gt;% pure_function() %&gt;% side_effect_function() %&gt;% pure_function() ## [1] 6 ## 6 written to /tmp/RtmpQLpfgY/file2b9c6258229e ## [1] 7 3.9 Control flow library(tidyverse) library(here) weather_path &lt;- function(filename) { # Returned value here(&quot;data/weather&quot;, filename) } read_weather_file &lt;- function(filename) { readxl::read_excel(weather_path(filename)) } A way to regulate the control flow is by using if (): read_weather_data &lt;- function(omit_zurich = FALSE, omit_toronto = FALSE) { # Create ensemble dataset from files on disk weather_data &lt;- bind_rows( berlin = read_weather_file(&quot;berlin.xlsx&quot;), toronto = read_weather_file(&quot;toronto.xlsx&quot;), tel_aviv = read_weather_file(&quot;tel_aviv.xlsx&quot;), zurich = read_weather_file(&quot;zurich.xlsx&quot;), .id = &quot;city_code&quot; ) # Filter, conditionally if (omit_zurich) { weather_data &lt;- weather_data %&gt;% filter(city_code != &quot;zurich&quot;) } if (omit_toronto) { weather_data &lt;- weather_data %&gt;% filter(city_code != &quot;toronto&quot;) } # Return result weather_data } read_weather_data(omit_toronto = TRUE, omit_zurich = TRUE) %&gt;% count(city_code) ## # A tibble: 2 x 2 ## city_code n ## &lt;chr&gt; &lt;int&gt; ## 1 berlin 49 ## 2 tel_aviv 49 read_weather_data(omit_toronto = TRUE, omit_zurich = FALSE) %&gt;% count(city_code) ## # A tibble: 3 x 2 ## city_code n ## &lt;chr&gt; &lt;int&gt; ## 1 berlin 49 ## 2 tel_aviv 49 ## 3 zurich 49 This can be useful if aiming at a possible early return: read_weather_data &lt;- function(omit_zurich = FALSE, omit_toronto = FALSE) { # Create ensemble dataset from files on disk weather_data &lt;- bind_rows( berlin = read_weather_file(&quot;berlin.xlsx&quot;), toronto = read_weather_file(&quot;toronto.xlsx&quot;), tel_aviv = read_weather_file(&quot;tel_aviv.xlsx&quot;), zurich = read_weather_file(&quot;zurich.xlsx&quot;), .id = &quot;city_code&quot; ) # Can keep original data? if (!omit_zurich &amp;&amp; !omit_toronto) { return(weather_data) } # Filter, conditionally if (omit_zurich) { weather_data &lt;- weather_data %&gt;% filter(city_code != &quot;zurich&quot;) } if (omit_toronto) { weather_data &lt;- weather_data %&gt;% filter(city_code != &quot;toronto&quot;) } # Return result weather_data } Conditional branching with if-else-logic. (This is just for illustration, you should not implement code like this!) read_weather_data &lt;- function(omit_zurich = FALSE, omit_toronto = FALSE) { # Create ensemble dataset from files on disk weather_data &lt;- bind_rows( berlin = read_weather_file(&quot;berlin.xlsx&quot;), toronto = read_weather_file(&quot;toronto.xlsx&quot;), tel_aviv = read_weather_file(&quot;tel_aviv.xlsx&quot;), zurich = read_weather_file(&quot;zurich.xlsx&quot;), .id = &quot;city_code&quot; ) # Filter, conditionally, and return if (!omit_zurich &amp;&amp; !omit_toronto) { weather_data } else if (omit_zurich &amp;&amp; !omit_toronto) { weather_data %&gt;% filter(city_code != &quot;zurich&quot;) } else if (!omit_zurich &amp;&amp; omit_toronto) { weather_data %&gt;% filter(city_code != &quot;toronto&quot;) } else { # Filter both weather_data %&gt;% filter(city_code != &quot;zurich&quot;) %&gt;% filter(city_code != &quot;toronto&quot;) } } read_weather_data(omit_toronto = TRUE) %&gt;% count(city_code) ## # A tibble: 3 x 2 ## city_code n ## &lt;chr&gt; &lt;int&gt; ## 1 berlin 49 ## 2 tel_aviv 49 ## 3 zurich 49 read_weather_data(omit_zurich = TRUE) %&gt;% count(city_code) ## # A tibble: 3 x 2 ## city_code n ## &lt;chr&gt; &lt;int&gt; ## 1 berlin 49 ## 2 tel_aviv 49 ## 3 toronto 49 3.10 Closures library(tidyverse) library(here) weather_path &lt;- function(filename) { # Returned value here(&quot;data/weather&quot;, filename) } read_weather_file &lt;- function(filename) { readxl::read_excel(weather_path(filename)) } Closures can e.g. be used for the creation of functions. Here we create a function that loads a particular dataset: make_read_weather_file &lt;- function(filename) { # Avoid odd effects due to lazy evaluation force(filename) # This function (closure) accesses the filename from the # outer function f &lt;- function() { read_weather_file(filename) } f } read_berlin &lt;- make_read_weather_file(&quot;berlin.xlsx&quot;) read_toronto &lt;- make_read_weather_file(&quot;toronto.xlsx&quot;) read_tel_aviv &lt;- make_read_weather_file(&quot;tel_aviv.xlsx&quot;) read_zurich &lt;- make_read_weather_file(&quot;zurich.xlsx&quot;) read_berlin ## function() { ## read_weather_file(filename) ## } ## &lt;environment: 0x6161e08&gt; read_berlin() ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0 0 ## 2 2019-04-28 16:00:00 Mostly… part… 0 0 ## 3 2019-04-28 17:00:00 Mostly… part… 0 0 ## 4 2019-04-28 18:00:00 Overca… clou… 0 0 ## 5 2019-04-28 19:00:00 Overca… clou… 0 0 ## 6 2019-04-28 20:00:00 Mostly… part… 0 0 ## 7 2019-04-28 21:00:00 Mostly… part… 0 0 ## 8 2019-04-28 22:00:00 Mostly… part… 0 0 ## 9 2019-04-28 23:00:00 Mostly… part… 0 0 ## 10 2019-04-29 00:00:00 Mostly… part… 0 0 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; Use closures as wrappers for other verbs/functions (such functions are also called “adverbs”): loudly &lt;- function(f) { force(f) function(...) { args &lt;- list(...) msg &lt;- paste0(length(args), &quot; argument(s)&quot;) message(msg) f(...) } } read_loudly &lt;- loudly(read_weather_file) read_loudly ## function(...) { ## args &lt;- list(...) ## msg &lt;- paste0(length(args), &quot; argument(s)&quot;) ## message(msg) ## ## f(...) ## } ## &lt;environment: 0x87f74d8&gt; read_loudly(&quot;berlin.xlsx&quot;) ## 1 argument(s) ## # A tibble: 49 x 18 ## time summary icon precipIntensity precipProbabili… ## &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2019-04-28 15:00:00 Mostly… part… 0 0 ## 2 2019-04-28 16:00:00 Mostly… part… 0 0 ## 3 2019-04-28 17:00:00 Mostly… part… 0 0 ## 4 2019-04-28 18:00:00 Overca… clou… 0 0 ## 5 2019-04-28 19:00:00 Overca… clou… 0 0 ## 6 2019-04-28 20:00:00 Mostly… part… 0 0 ## 7 2019-04-28 21:00:00 Mostly… part… 0 0 ## 8 2019-04-28 22:00:00 Mostly… part… 0 0 ## 9 2019-04-28 23:00:00 Mostly… part… 0 0 ## 10 2019-04-29 00:00:00 Mostly… part… 0 0 ## # … with 39 more rows, and 13 more variables: temperature &lt;dbl&gt;, ## # apparentTemperature &lt;dbl&gt;, dewPoint &lt;dbl&gt;, humidity &lt;dbl&gt;, ## # pressure &lt;dbl&gt;, windSpeed &lt;dbl&gt;, windGust &lt;dbl&gt;, windBearing &lt;dbl&gt;, ## # cloudCover &lt;dbl&gt;, uvIndex &lt;dbl&gt;, visibility &lt;dbl&gt;, ozone &lt;dbl&gt;, ## # precipType &lt;chr&gt; Unix philosophy, originated by Ken Thompson↩ "],
["non-rectangular-data.html", "4 Non-rectangular data", " 4 Non-rectangular data working with raw data from online services (JSON) "],
["tidy-evaluation.html", "5 Tidy evaluation", " 5 Tidy evaluation writing functions that work with datasets of different shape "],
["references.html", "# References", " # References "]
]
